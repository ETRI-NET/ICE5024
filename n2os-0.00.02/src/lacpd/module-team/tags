!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BASE_PATH	Makefile	/^BASE_PATH   := \/lib\/modules\/$(shell uname -r)\/build$/;"	m
DRV_NAME	team.c	/^MODULE_ALIAS_RTNL_LINK(DRV_NAME);$/;"	v
DRV_NAME	team.c	38;"	d	file:
EXTRA_CFLAGS	Makefile	/^	make -C $(BASE_PATH) EXTRA_CFLAGS=$(FLAGS) M=$(PWD) modules$/;"	m
FLAGS	Makefile	/^FLAGS=-DN2OS #-I.\/include$/;"	m
PRINTK	team_mode_loadbalance.c	29;"	d	file:
PRINTK	team_mode_loadbalance.c	31;"	d	file:
SIOCSADDSLAVE	team.c	1358;"	d	file:
SIOCSDELSLAVE	team.c	1359;"	d	file:
TEAM_VLAN_FEATURES	team.c	594;"	d	file:
TEAM_VLAN_FEATURES	team.c	598;"	d	file:
__find_mode	team.c	/^static struct team_mode *__find_mode(const char *kind)$/;"	f	file:
__fprog_create	team_mode_loadbalance.c	/^static int __fprog_create(struct sock_fprog **pfprog, u32 data_len,$/;"	f	file:
__fprog_destroy	team_mode_loadbalance.c	/^static void __fprog_destroy(struct sock_fprog *fprog)$/;"	f	file:
__get_first_port_up	team_mode_roundrobin.c	/^static struct team_port *__get_first_port_up(struct team *team,$/;"	f	file:
__read_mostly	team.c	/^static struct notifier_block team_notifier_block __read_mostly = {$/;"	v	typeref:struct:team_notifier_block	file:
__read_mostly	team.c	/^static struct rtnl_link_ops team_link_ops __read_mostly = {$/;"	v	typeref:struct:team_link_ops	file:
__reconstruct_port_hlist	team.c	/^static void __reconstruct_port_hlist(struct team *team, int rm_index)$/;"	f	file:
__set_port_mac	team.c	/^static int __set_port_mac(struct net_device *port_dev,$/;"	f	file:
__team_change_mode	team.c	/^static int __team_change_mode(struct team *team,$/;"	f	file:
__team_compute_features	team.c	/^static void __team_compute_features(struct team *team)$/;"	f	file:
__team_find_option	team.c	/^struct team_option *__team_find_option(struct team *team, const char *opt_name)$/;"	f
__team_options_change_check	team.c	/^static void __team_options_change_check(struct team *team)$/;"	f	file:
__team_options_mark_removed	team.c	/^static void __team_options_mark_removed(struct team *team,$/;"	f	file:
__team_options_register	team.c	/^int __team_options_register(struct team *team,$/;"	f
__team_options_unregister	team.c	/^static void __team_options_unregister(struct team *team,$/;"	f	file:
__team_port_change_check	team.c	/^static void __team_port_change_check(struct team_port *port, bool linkup)$/;"	f	file:
__this_module	nteam.mod.c	/^struct module __this_module$/;"	v	typeref:struct:module
__this_module	nteam_mode_loadbalance.mod.c	/^struct module __this_module$/;"	v	typeref:struct:module
__used	nteam.mod.c	/^__used$/;"	v	file:
__used	nteam_mode_loadbalance.mod.c	/^__used$/;"	v	file:
ab_active_port_get	team_mode_activebackup.c	/^static int ab_active_port_get(struct team *team, void *arg)$/;"	f	file:
ab_active_port_set	team_mode_activebackup.c	/^static int ab_active_port_set(struct team *team, void *arg)$/;"	f	file:
ab_cleanup_module	team_mode_activebackup.c	/^module_exit(ab_cleanup_module);$/;"	v
ab_cleanup_module	team_mode_activebackup.c	/^static void __exit ab_cleanup_module(void)$/;"	f	file:
ab_exit	team_mode_activebackup.c	/^void ab_exit(struct team *team)$/;"	f
ab_init	team_mode_activebackup.c	/^int ab_init(struct team *team)$/;"	f
ab_init_module	team_mode_activebackup.c	/^module_init(ab_init_module);$/;"	v
ab_init_module	team_mode_activebackup.c	/^static int __init ab_init_module(void)$/;"	f	file:
ab_mode	team_mode_activebackup.c	/^static struct team_mode ab_mode = {$/;"	v	typeref:struct:team_mode	file:
ab_mode_ops	team_mode_activebackup.c	/^static const struct team_mode_ops ab_mode_ops = {$/;"	v	typeref:struct:team_mode_ops	file:
ab_options	team_mode_activebackup.c	/^static const struct team_option ab_options[] = {$/;"	v	typeref:struct:team_option	file:
ab_port_leave	team_mode_activebackup.c	/^static void ab_port_leave(struct team *team, struct team_port *port)$/;"	f	file:
ab_priv	team_mode_activebackup.c	/^static struct ab_priv *ab_priv(struct team *team)$/;"	f	file:
ab_priv	team_mode_activebackup.c	/^struct ab_priv {$/;"	s	file:
ab_receive	team_mode_activebackup.c	/^static rx_handler_result_t ab_receive(struct team *team, struct team_port *port,$/;"	f	file:
ab_transmit	team_mode_activebackup.c	/^static bool ab_transmit(struct team *team, struct sk_buff *skb)$/;"	f	file:
active_port	team_mode_activebackup.c	/^	struct team_port __rcu *active_port;$/;"	m	struct:ab_priv	typeref:struct:ab_priv::__rcu	file:
fp	team_mode_loadbalance.c	/^	struct sk_filter __rcu *fp;$/;"	m	struct:lb_priv	typeref:struct:lb_priv::__rcu	file:
is_good_mode_name	team.c	/^static bool is_good_mode_name(const char *name)$/;"	f	file:
lb_bpf_func_get	team_mode_loadbalance.c	/^static int lb_bpf_func_get(struct team *team, void *arg)$/;"	f	file:
lb_bpf_func_set	team_mode_loadbalance.c	/^static int lb_bpf_func_set(struct team *team, void *arg)$/;"	f	file:
lb_cleanup_module	team_mode_loadbalance.c	/^module_exit(lb_cleanup_module);$/;"	v
lb_cleanup_module	team_mode_loadbalance.c	/^static void __exit lb_cleanup_module(void)$/;"	f	file:
lb_exit	team_mode_loadbalance.c	/^static void lb_exit(struct team *team)$/;"	f	file:
lb_init	team_mode_loadbalance.c	/^static int lb_init(struct team *team)$/;"	f	file:
lb_init_module	team_mode_loadbalance.c	/^module_init(lb_init_module);$/;"	v
lb_init_module	team_mode_loadbalance.c	/^static int __init lb_init_module(void)$/;"	f	file:
lb_mode	team_mode_loadbalance.c	/^static struct team_mode lb_mode = {$/;"	v	typeref:struct:team_mode	file:
lb_mode_ops	team_mode_loadbalance.c	/^static const struct team_mode_ops lb_mode_ops = {$/;"	v	typeref:struct:team_mode_ops	file:
lb_options	team_mode_loadbalance.c	/^static const struct team_option lb_options[] = {$/;"	v	typeref:struct:team_option	file:
lb_priv	team_mode_loadbalance.c	/^static struct lb_priv *lb_priv(struct team *team)$/;"	f	file:
lb_priv	team_mode_loadbalance.c	/^struct lb_priv {$/;"	s	file:
lb_transmit	team_mode_loadbalance.c	/^static bool lb_transmit(struct team *team, struct sk_buff *skb)$/;"	f	file:
list	team.c	/^	struct list_head list;$/;"	m	struct:team_port_local	typeref:struct:team_port_local::list_head	file:
orig_fprog	team_mode_loadbalance.c	/^	struct sock_fprog *orig_fprog;$/;"	m	struct:lb_priv	typeref:struct:lb_priv::sock_fprog	file:
port	team.c	/^	struct team_port port;$/;"	m	struct:team_port_local	typeref:struct:team_port_local::team_port	file:
rr_cleanup_module	team_mode_roundrobin.c	/^module_exit(rr_cleanup_module);$/;"	v
rr_cleanup_module	team_mode_roundrobin.c	/^static void __exit rr_cleanup_module(void)$/;"	f	file:
rr_init_module	team_mode_roundrobin.c	/^module_init(rr_init_module);$/;"	v
rr_init_module	team_mode_roundrobin.c	/^static int __init rr_init_module(void)$/;"	f	file:
rr_mode	team_mode_roundrobin.c	/^static struct team_mode rr_mode = {$/;"	v	typeref:struct:team_mode	file:
rr_mode_ops	team_mode_roundrobin.c	/^static const struct team_mode_ops rr_mode_ops = {$/;"	v	typeref:struct:team_mode_ops	file:
rr_port_change_mac	team_mode_roundrobin.c	/^static void rr_port_change_mac(struct team *team, struct team_port *port)$/;"	f	file:
rr_port_enter	team_mode_roundrobin.c	/^static int rr_port_enter(struct team *team, struct team_port *port)$/;"	f	file:
rr_priv	team_mode_roundrobin.c	/^static struct rr_priv *rr_priv(struct team *team)$/;"	f	file:
rr_priv	team_mode_roundrobin.c	/^struct rr_priv {$/;"	s	file:
rr_transmit	team_mode_roundrobin.c	/^static bool rr_transmit(struct team *team, struct sk_buff *skb)$/;"	f	file:
sent_packets	team_mode_roundrobin.c	/^	unsigned int sent_packets;$/;"	m	struct:rr_priv	file:
sk_filter_size	team_mode_loadbalance.c	/^static inline unsigned int sk_filter_size(unsigned int proglen)$/;"	f	file:
sk_unattached_filter_create	team_mode_loadbalance.c	/^EXPORT_SYMBOL_GPL(sk_unattached_filter_create);$/;"	v
sk_unattached_filter_create	team_mode_loadbalance.c	/^int sk_unattached_filter_create(struct sk_filter **pfp,$/;"	f
sk_unattached_filter_destroy	team_mode_loadbalance.c	/^EXPORT_SYMBOL_GPL(sk_unattached_filter_destroy);$/;"	v
sk_unattached_filter_destroy	team_mode_loadbalance.c	/^void sk_unattached_filter_destroy(struct sk_filter *fp)$/;"	f
team_add_slave	team.c	/^static int team_add_slave(struct net_device *dev, struct net_device *port_dev)$/;"	f	file:
team_adjust_ops	team.c	/^static void team_adjust_ops(struct team *team)$/;"	f	file:
team_change_event_mcgrp	team.c	/^static struct genl_multicast_group team_change_event_mcgrp = {$/;"	v	typeref:struct:genl_multicast_group	file:
team_change_mode	team.c	/^static int team_change_mode(struct team *team, const char *kind)$/;"	f	file:
team_change_mtu	team.c	/^static int team_change_mtu(struct net_device *dev, int new_mtu)$/;"	f	file:
team_change_rx_flags	team.c	/^static void team_change_rx_flags(struct net_device *dev, int change)$/;"	f	file:
team_close	team.c	/^static int team_close(struct net_device *dev)$/;"	f	file:
team_compute_features	team.c	/^static void team_compute_features(struct team *team)$/;"	f	file:
team_del_slave	team.c	/^static int team_del_slave(struct net_device *dev, struct net_device *port_dev)$/;"	f	file:
team_destructor	team.c	/^static void team_destructor(struct net_device *dev)$/;"	f	file:
team_device_event	team.c	/^static int team_device_event(struct notifier_block *unused,$/;"	f	file:
team_dummy_receive	team.c	/^rx_handler_result_t team_dummy_receive(struct team *team,$/;"	f
team_dummy_transmit	team.c	/^static bool team_dummy_transmit(struct team *team, struct sk_buff *skb)$/;"	f	file:
team_fix_features	team.c	/^static netdev_features_t team_fix_features(struct net_device *dev,$/;"	f	file:
team_get_stats	team.c	/^static struct net_device_stats *team_get_stats(struct net_device *dev)$/;"	f	file:
team_get_stats64	team.c	/^team_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)$/;"	f	file:
team_handle_frame	team.c	/^static rx_handler_result_t team_handle_frame(struct sk_buff **pskb)$/;"	f	file:
team_init	team.c	/^static int team_init(struct net_device *dev)$/;"	f	file:
team_ioctl	team.c	/^static int team_ioctl (struct net_device *dev, struct ifreq *ifr, int cmd)$/;"	f	file:
team_mode_get	team.c	/^static struct team_mode *team_mode_get(const char *kind)$/;"	f	file:
team_mode_option_get	team.c	/^static int team_mode_option_get(struct team *team, void *arg)$/;"	f	file:
team_mode_option_set	team.c	/^static int team_mode_option_set(struct team *team, void *arg)$/;"	f	file:
team_mode_put	team.c	/^static void team_mode_put(const struct team_mode *mode)$/;"	f	file:
team_mode_register	team.c	/^EXPORT_SYMBOL(team_mode_register);$/;"	v
team_mode_register	team.c	/^int team_mode_register(struct team_mode *mode)$/;"	f
team_mode_unregister	team.c	/^EXPORT_SYMBOL(team_mode_unregister);$/;"	v
team_mode_unregister	team.c	/^int team_mode_unregister(struct team_mode *mode)$/;"	f
team_module_exit	team.c	/^module_exit(team_module_exit);$/;"	v
team_module_exit	team.c	/^static void __exit team_module_exit(void)$/;"	f	file:
team_module_init	team.c	/^module_init(team_module_init);$/;"	v
team_module_init	team.c	/^static int __init team_module_init(void)$/;"	f	file:
team_netdev_ops	team.c	/^static const struct net_device_ops team_netdev_ops = {$/;"	v	typeref:struct:net_device_ops	file:
team_newlink	team.c	/^static int team_newlink(struct net *src_net, struct net_device *dev,$/;"	f	file:
team_nl_cmd_noop	team.c	/^static int team_nl_cmd_noop(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
team_nl_cmd_options_get	team.c	/^static int team_nl_cmd_options_get(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
team_nl_cmd_options_set	team.c	/^static int team_nl_cmd_options_set(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
team_nl_cmd_port_list_get	team.c	/^static int team_nl_cmd_port_list_get(struct sk_buff *skb,$/;"	f	file:
team_nl_family	team.c	/^static struct genl_family team_nl_family = {$/;"	v	typeref:struct:genl_family	file:
team_nl_fill_options_get	team.c	/^static int team_nl_fill_options_get(struct sk_buff *skb,$/;"	f	file:
team_nl_fill_options_get_all	team.c	/^static int team_nl_fill_options_get_all(struct sk_buff *skb,$/;"	f	file:
team_nl_fill_port_list_get	team.c	/^static int team_nl_fill_port_list_get(struct sk_buff *skb,$/;"	f	file:
team_nl_fill_port_list_get_all	team.c	/^static int team_nl_fill_port_list_get_all(struct sk_buff *skb,$/;"	f	file:
team_nl_fini	team.c	/^static void team_nl_fini(void)$/;"	f	file:
team_nl_init	team.c	/^static int team_nl_init(void)$/;"	f	file:
team_nl_ops	team.c	/^static struct genl_ops team_nl_ops[] = {$/;"	v	typeref:struct:genl_ops	file:
team_nl_option_policy	team.c	/^team_nl_option_policy[TEAM_ATTR_OPTION_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
team_nl_policy	team.c	/^static const struct nla_policy team_nl_policy[TEAM_ATTR_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
team_nl_send_event_options_get	team.c	/^static int team_nl_send_event_options_get(struct team *team)$/;"	f	file:
team_nl_send_event_port_list_get	team.c	/^static int team_nl_send_event_port_list_get(struct team *team)$/;"	f	file:
team_nl_send_generic	team.c	/^static int team_nl_send_generic(struct genl_info *info, struct team *team,$/;"	f	file:
team_nl_team_get	team.c	/^static struct team *team_nl_team_get(struct genl_info *info)$/;"	f	file:
team_nl_team_put	team.c	/^static void team_nl_team_put(struct team *team)$/;"	f	file:
team_no_mode_kind	team.c	/^static const char team_no_mode_kind[] = "*NOMODE*";$/;"	v	file:
team_open	team.c	/^static int team_open(struct net_device *dev)$/;"	f	file:
team_option_get	team.c	/^static int team_option_get(struct team *team, struct team_option *option,$/;"	f	file:
team_option_set	team.c	/^static int team_option_set(struct team *team, struct team_option *option,$/;"	f	file:
team_options	team.c	/^static const struct team_option team_options[] = {$/;"	v	typeref:struct:team_option	file:
team_options_register	team.c	/^EXPORT_SYMBOL(team_options_register);$/;"	v
team_options_register	team.c	/^int team_options_register(struct team *team,$/;"	f
team_options_unregister	team.c	/^EXPORT_SYMBOL(team_options_unregister);$/;"	v
team_options_unregister	team.c	/^void team_options_unregister(struct team *team,$/;"	f
team_port_add	team.c	/^static int team_port_add(struct team *team, struct net_device *port_dev)$/;"	f	file:
team_port_change_check	team.c	/^static void team_port_change_check(struct team_port *port, bool linkup)$/;"	f	file:
team_port_del	team.c	/^static int team_port_del(struct team *team, struct net_device *port_dev)$/;"	f	file:
team_port_enter	team.c	/^static int team_port_enter(struct team *team, struct team_port *port)$/;"	f	file:
team_port_exists	team.c	45;"	d	file:
team_port_find	team.c	/^static bool team_port_find(const struct team *team,$/;"	f	file:
team_port_get_rcu	team.c	/^static struct team_port *team_port_get_rcu(const struct net_device *dev)$/;"	f	file:
team_port_get_rtnl	team.c	/^static struct team_port *team_port_get_rtnl(const struct net_device *dev)$/;"	f	file:
team_port_leave	team.c	/^static void team_port_leave(struct team *team, struct team_port *port)$/;"	f	file:
team_port_list_add_port	team.c	/^static void team_port_list_add_port(struct team *team,$/;"	f	file:
team_port_list_del_port	team.c	/^static void team_port_list_del_port(struct team *team,$/;"	f	file:
team_port_local	team.c	/^struct team_port_local {$/;"	s	file:
team_port_local_get	team.c	/^static struct team_port *team_port_local_get(struct net_device *dev)$/;"	f	file:
team_port_local_register	team.c	/^static int team_port_local_register(struct team_port *port)$/;"	f	file:
team_port_local_unregister	team.c	/^static int team_port_local_unregister(struct team_port *port)$/;"	f	file:
team_port_set_orig_mac	team.c	/^int team_port_set_orig_mac(struct team_port *port)$/;"	f
team_port_set_team_mac	team.c	/^EXPORT_SYMBOL(team_port_set_team_mac);$/;"	v
team_port_set_team_mac	team.c	/^int team_port_set_team_mac(struct team_port *port)$/;"	f
team_set_mac_address	team.c	/^static int team_set_mac_address(struct net_device *dev, void *p)$/;"	f	file:
team_set_rx_mode	team.c	/^static void team_set_rx_mode(struct net_device *dev)$/;"	f	file:
team_setup	team.c	/^static void team_setup(struct net_device *dev)$/;"	f	file:
team_uninit	team.c	/^static void team_uninit(struct net_device *dev)$/;"	f	file:
team_validate	team.c	/^static int team_validate(struct nlattr *tb[], struct nlattr *data[])$/;"	f	file:
team_vlan_rx_add_vid	team.c	/^static int team_vlan_rx_add_vid(struct net_device *dev, uint16_t vid)$/;"	f	file:
team_vlan_rx_add_vid	team.c	/^static void team_vlan_rx_add_vid(struct net_device *dev, uint16_t vid)$/;"	f	file:
team_vlan_rx_kill_vid	team.c	/^static int team_vlan_rx_kill_vid(struct net_device *dev, uint16_t vid)$/;"	f	file:
team_vlan_rx_kill_vid	team.c	/^static void team_vlan_rx_kill_vid(struct net_device *dev, uint16_t vid)$/;"	f	file:
team_vlan_rx_register	team.c	/^static void team_vlan_rx_register(struct net_device *dev, struct vlan_group *vlan_group)$/;"	f	file:
team_xmit	team.c	/^static netdev_tx_t team_xmit(struct sk_buff *skb, struct net_device *dev)$/;"	f	file:
vlan_entry	team.c	/^struct vlan_entry {$/;"	s	file:
vlan_id	team.c	/^    unsigned short vlan_id;$/;"	m	struct:vlan_entry	file:
vlan_list	team.c	/^    struct list_head vlan_list;$/;"	m	struct:vlan_entry	typeref:struct:vlan_entry::list_head	file:
vlan_vids_add_by_dev	team.c	/^void vlan_vids_add_by_dev(struct team *team, struct net_device *port_dev)$/;"	f
vlan_vids_del_by_dev	team.c	/^void vlan_vids_del_by_dev(struct team *team, struct net_device *port_dev)$/;"	f
